//----------------------------------------
// Function: batch_prefill_paged_kv_kernel
//----------------------------------------
@group(0) @binding(0) var<storage, read> k_rope_pos_offset : array<i32>;
@group(0) @binding(1) var<storage, read> length_info : array<i32>;
@group(0) @binding(2) var<storage, read_write> lse : array<f32>;
@group(0) @binding(3) var<storage, read_write> output : array<f32>;
@group(0) @binding(4) var<storage, read> page_indptr : array<i32>;
@group(0) @binding(5) var<storage, read> page_values : array<i32>;
@group(0) @binding(6) var<storage, read> pages : array<f32>;
@group(0) @binding(7) var<storage, read> q : array<f32>;
@group(0) @binding(8) var<storage, read> q_indptr : array<i32>;
@group(0) @binding(9) var<storage, read> q_rope_position : array<i32>;

struct PODArgs {
  attn_score_scaling_factor: f32,
  batch_size: i32,
  causal: i32,
  k_rope_pos_offset_elem_offset: i32,
  length_info_elem_offset: i32,
  max_num_pages: i32,
  nnz_pages: i32,
  page_indptr_elem_offset: i32,
  page_values_elem_offset: i32,
  q_indptr_elem_offset: i32,
  q_rope_position_elem_offset: i32,
  rope_scale: f32,
  rope_theta: f32,
  rotary_mode: i32,
  total_len: i32,
  packGridDimX: u32
}
@group(0) @binding(10) var<uniform> podArgs : PODArgs;

var<workgroup> m_smem : array<f32, 16>;
var<workgroup> d_smem : array<f32, 16>;
var<workgroup> Q_smem : array<f32, 2048>;
var<workgroup> K_smem : array<f32, 2048>;
var<workgroup> V_smem : array<f32, 2048>;
var<workgroup> m_prev_smem : array<f32, 16>;
@compute @workgroup_size(32, 4, 1)
fn batch_prefill_paged_kv_kernel(
  @builtin(workgroup_id) blockIdx : vec3<u32>,
  @builtin(num_workgroups) gridDim : vec3<u32>,
  @builtin(local_invocation_id) threadIdx : vec3<u32>
) {
  if (blockIdx.z * gridDim.x + blockIdx.x > podArgs.packGridDimX) { return; }
  let v__1 : i32 = i32(blockIdx.z * gridDim.x + blockIdx.x);
  var tile_id : array<i32, 1>;
  var batch_idx : array<i32, 1>;
  var batch_rows : array<i32, 1>;
  var batch_tiles : array<i32, 1>;
  var kv_chunk_len : array<i32, 1>;
  var O_local : array<f32, 16>;
  var S_local : array<f32, 2>;
  var m_prev : array<f32, 1>;
  var m_new : array<f32, 1>;
  var d_new : array<f32, 1>;
  tile_id[0i] = v__1;
  batch_idx[0i] = 0i;
  batch_rows[0i] = ((q_indptr[(podArgs.q_indptr_elem_offset + 1i)] * 7i) - (q_indptr[podArgs.q_indptr_elem_offset] * 7i));
  batch_tiles[0i] = ((batch_rows[0i] + 15i)>>4u);
  while (true) {
    if (!(((batch_idx[0i] < podArgs.batch_size)))) { break; }
    while (true) {
      if (!(((batch_tiles[0i] <= tile_id[0i]) && (batch_idx[0i] < podArgs.batch_size)))) { break; }
      tile_id[0i] = (tile_id[0i] - batch_tiles[0i]);
      batch_idx[0i] = (batch_idx[0i] + 1i);
      if (batch_idx[0i] < podArgs.batch_size) {
        let b_idx : i32 = batch_idx[0i];
        batch_rows[0i] = ((q_indptr[((b_idx + podArgs.q_indptr_elem_offset) + 1i)] * 7i) - (q_indptr[(b_idx + podArgs.q_indptr_elem_offset)] * 7i));
        batch_tiles[0i] = ((batch_rows[0i] + 15i)>>4u);
      }
    }
    if ((batch_idx[0i] < podArgs.batch_size)) {
      let b_idx_1 : i32 = batch_idx[0i];
      let LH_start : i32 = (tile_id[0i] * 16i);
      let q_indptr_val : i32 = q_indptr[(b_idx_1 + podArgs.q_indptr_elem_offset)];
      let cur_page_indptr_begin : i32 = page_indptr[(b_idx_1 + podArgs.page_indptr_elem_offset)];
      let cur_page_indptr_end : i32 = page_indptr[((b_idx_1 + podArgs.page_indptr_elem_offset) + 1i)];
      var condval : i32;
      if ((cur_page_indptr_begin != cur_page_indptr_end)) {
        condval = ((((cur_page_indptr_end * 16i) + length_info[(b_idx_1 + podArgs.length_info_elem_offset)]) - (cur_page_indptr_begin * 16i)) - 16i);
} else {
        condval = 0i;
}
      kv_chunk_len[0i] = condval;
      workgroupBarrier();
      if (((i32(threadIdx.y) * 2i) + (i32(threadIdx.x)>>4u)) < 1i) {
        m_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = -5.000000e+04f;
        d_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = 1.000000e+00f;
      }
      for (var li_1 : i32 = 0; li_1 < 4i; li_1++) {
        for (var lj_1 : i32 = 0; lj_1 < 4i; lj_1++) {
          O_local[((li_1 * 4i) + lj_1)] = 0.000000e+00f;
        }
      }
      workgroupBarrier();
      for (var li_lj_fused_0 : i32 = 0; li_lj_fused_0 < 8i; li_lj_fused_0++) {
        if (((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) / 7i) + (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u)) + q_indptr_val) < q_indptr[((b_idx_1 + podArgs.q_indptr_elem_offset) + 1i)]) {
          for (var li_lj_fused_3_s : i32 = 0; li_lj_fused_3_s < 2i; li_lj_fused_3_s++) {
            var condval_1 : f32;
            if ((podArgs.rotary_mode == 1i)) {
              var condval_2 : f32;
              if (((i32(threadIdx.y) & 1i) < 1i)) {
                condval_2 = (q[(((((((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) / 7i) + (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u)) * 3584i) + (q_indptr_val * 3584i)) + (i32(blockIdx.y) * 896i)) + ((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i) + (7i & (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u))) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + li_lj_fused_3_s) & 127i)) + 64i)] * -1.000000e+00f);
} else {
                condval_2 = q[(((((((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) / 7i) + (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u)) * 3584i) + (q_indptr_val * 3584i)) + (i32(blockIdx.y) * 896i)) + ((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i) + (7i & (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u))) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + li_lj_fused_3_s) & 127i)) - 64i)];
}
              condval_1 = fma(sin(((f32(q_rope_position[(((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) / 7i) + (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u)) + q_indptr_val) + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale) / pow(podArgs.rope_theta, (f32(((i32(threadIdx.x) * 4i) + (li_lj_fused_3_s * 2i))) * 7.812500e-03f)))), condval_2, (cos(((f32(q_rope_position[(((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) / 7i) + (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u)) + q_indptr_val) + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale) / pow(podArgs.rope_theta, (f32(((i32(threadIdx.x) * 4i) + (li_lj_fused_3_s * 2i))) * 7.812500e-03f)))) * q[((((((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) / 7i) + (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u)) * 3584i) + (q_indptr_val * 3584i)) + (i32(blockIdx.y) * 896i)) + ((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i) + (7i & (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u))) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + li_lj_fused_3_s) & 127i))]));
} else {
              condval_1 = q[((((((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) / 7i) + (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u)) * 3584i) + (q_indptr_val * 3584i)) + (i32(blockIdx.y) * 896i)) + ((((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i) + (7i & (((((li_lj_fused_0 * 2i) + (i32(threadIdx.y)>>1u)) + LH_start) % 7i)>>31u))) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + li_lj_fused_3_s) & 127i))];
}
            Q_smem[(((li_lj_fused_0 * 256i) + ((i32(threadIdx.y)>>1u) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + li_lj_fused_3_s) & 127i))] = condval_1;
          }
        } else {
          let v__2 : i32 = (((li_lj_fused_0 * 256i) + (i32(threadIdx.y) * 64i)) + (i32(threadIdx.x) * 2i));
          Q_smem[v__2 + 0] = vec2<f32>(0.000000e+00f, 0.000000e+00f)[0];
          Q_smem[v__2 + 1] = vec2<f32>(0.000000e+00f, 0.000000e+00f)[1];
        }
      }
      workgroupBarrier();
      for (var iterator : i32 = 0; iterator < ((kv_chunk_len[0i] + 15i)>>4u); iterator++) {
        workgroupBarrier();
        for (var lz_ly_fused_0 : i32 = 0; lz_ly_fused_0 < 8i; lz_ly_fused_0++) {
          if ((((iterator * 16i) + (lz_ly_fused_0 * 2i)) + (i32(threadIdx.y)>>1u)) < kv_chunk_len[0i]) {
            let page_no : i32 = page_values[((iterator + cur_page_indptr_begin) + podArgs.page_values_elem_offset)];
            for (var lz_ly_fused_3_s : i32 = 0; lz_ly_fused_3_s < 2i; lz_ly_fused_3_s++) {
              var condval_3 : f32;
              if ((podArgs.rotary_mode == 1i)) {
                var condval_4 : f32;
                if (((i32(threadIdx.y) & 1i) < 1i)) {
                  condval_4 = (pages[((((((page_no * 16384i) + (i32(blockIdx.y) * 2048i)) + (lz_ly_fused_0 * 256i)) + ((i32(threadIdx.y)>>1u) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + lz_ly_fused_3_s) & 127i)) + 64i)] * -1.000000e+00f);
} else {
                  condval_4 = pages[((((((page_no * 16384i) + (i32(blockIdx.y) * 2048i)) + (lz_ly_fused_0 * 256i)) + ((i32(threadIdx.y)>>1u) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + lz_ly_fused_3_s) & 127i)) - 64i)];
}
                condval_3 = fma(sin(((f32(((((iterator * 16i) + (lz_ly_fused_0 * 2i)) + (i32(threadIdx.y)>>1u)) + k_rope_pos_offset[(b_idx_1 + podArgs.k_rope_pos_offset_elem_offset)])) * podArgs.rope_scale) / pow(podArgs.rope_theta, (f32(((i32(threadIdx.x) * 4i) + (lz_ly_fused_3_s * 2i))) * 7.812500e-03f)))), condval_4, (cos(((f32(((((iterator * 16i) + (lz_ly_fused_0 * 2i)) + (i32(threadIdx.y)>>1u)) + k_rope_pos_offset[(b_idx_1 + podArgs.k_rope_pos_offset_elem_offset)])) * podArgs.rope_scale) / pow(podArgs.rope_theta, (f32(((i32(threadIdx.x) * 4i) + (lz_ly_fused_3_s * 2i))) * 7.812500e-03f)))) * pages[(((((page_no * 16384i) + (i32(blockIdx.y) * 2048i)) + (lz_ly_fused_0 * 256i)) + ((i32(threadIdx.y)>>1u) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + lz_ly_fused_3_s) & 127i))]));
} else {
                condval_3 = pages[(((((page_no * 16384i) + (i32(blockIdx.y) * 2048i)) + (lz_ly_fused_0 * 256i)) + ((i32(threadIdx.y)>>1u) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + lz_ly_fused_3_s) & 127i))];
}
              K_smem[(((lz_ly_fused_0 * 256i) + ((i32(threadIdx.y)>>1u) * 128i)) + ((((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + lz_ly_fused_3_s) & 127i))] = condval_3;
            }
          } else {
            let v__3 : i32 = (((lz_ly_fused_0 * 256i) + (i32(threadIdx.y) * 64i)) + (i32(threadIdx.x) * 2i));
            K_smem[v__3 + 0] = vec2<f32>(0.000000e+00f, 0.000000e+00f)[0];
            K_smem[v__3 + 1] = vec2<f32>(0.000000e+00f, 0.000000e+00f)[1];
          }
        }
        workgroupBarrier();
        for (var lz_ly_fused_0_1 : i32 = 0; lz_ly_fused_0_1 < 8i; lz_ly_fused_0_1++) {
          if ((((iterator * 16i) + (lz_ly_fused_0_1 * 2i)) + (i32(threadIdx.y)>>1u)) < kv_chunk_len[0i]) {
            let page_no_1 : i32 = page_values[((iterator + cur_page_indptr_begin) + podArgs.page_values_elem_offset)];
            let v__4 : i32 = ((((((page_no_1 * 16384i) + (i32(blockIdx.y) * 2048i)) + (lz_ly_fused_0_1 * 256i)) + (i32(threadIdx.y) * 64i)) + (i32(threadIdx.x) * 2i)) + 8192i);
            let v__5 : i32 = (((lz_ly_fused_0_1 * 256i) + (i32(threadIdx.y) * 64i)) + (i32(threadIdx.x) * 2i));
            V_smem[v__5 + 0] = vec2<f32>(pages[v__4 + 0], pages[v__4 + 1])[0];
            V_smem[v__5 + 1] = vec2<f32>(pages[v__4 + 0], pages[v__4 + 1])[1];
          } else {
            let v__6 : i32 = (((lz_ly_fused_0_1 * 256i) + (i32(threadIdx.y) * 64i)) + (i32(threadIdx.x) * 2i));
            V_smem[v__6 + 0] = vec2<f32>(0.000000e+00f, 0.000000e+00f)[0];
            V_smem[v__6 + 1] = vec2<f32>(0.000000e+00f, 0.000000e+00f)[1];
          }
        }
        workgroupBarrier();
        for (var lj_1_init : i32 = 0; lj_1_init < 2i; lj_1_init++) {
          S_local[lj_1_init] = 0.000000e+00f;
        }
        for (var lk_0 : i32 = 0; lk_0 < 16i; lk_0++) {
          for (var lj_1_1 : i32 = 0; lj_1_1 < 2i; lj_1_1++) {
            for (var lk_1 : i32 = 0; lk_1 < 8i; lk_1++) {
              S_local[lj_1_1] = fma(((Q_smem[((((i32(threadIdx.y) * 512i) + ((i32(threadIdx.x)>>3u) * 128i)) + (lk_0 * 8i)) + lk_1)] * K_smem[(((((i32(threadIdx.x) & 7i) * 256i) + (lj_1_1 * 128i)) + (lk_0 * 8i)) + lk_1)]) * podArgs.attn_score_scaling_factor), 1.275174e-01f, S_local[lj_1_1]);
            }
          }
        }
        workgroupBarrier();
        for (var lj_1_2 : i32 = 0; lj_1_2 < 2i; lj_1_2++) {
          K_smem[(((i32(threadIdx.y) * 64i) + (i32(threadIdx.x) * 2i)) + lj_1_2)] = S_local[lj_1_2];
        }
        workgroupBarrier();
        if (((i32(threadIdx.y) * 2i) + (i32(threadIdx.x)>>4u)) < 1i) {
          m_prev[0i] = m_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))];
          m_new[0i] = m_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))];
          for (var j : i32 = 0; j < 16i; j++) {
            var condval_5 : bool;
            if ((0i < podArgs.causal)) {
              condval_5 = (((iterator * 16i) + j) <= ((((((((i32(threadIdx.y) * 32i) + LH_start) + i32(threadIdx.x)) / 7i) + (((((i32(threadIdx.y) * 32i) + LH_start) + i32(threadIdx.x)) % 7i)>>31u)) + kv_chunk_len[0i]) + q_indptr[(b_idx_1 + podArgs.q_indptr_elem_offset)]) - q_indptr[((b_idx_1 + podArgs.q_indptr_elem_offset) + 1i)]));
} else {
              condval_5 = (((iterator * 16i) + j) < kv_chunk_len[0i]);
}
            if (condval_5) {
              m_new[0i] = max(m_new[0i], K_smem[(((i32(threadIdx.y) * 512i) + (i32(threadIdx.x) * 16i)) + j)]);
            }
          }
          d_new[0i] = (d_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] * exp2((m_prev[0i] - m_new[0i])));
        }
        workgroupBarrier();
        for (var j_1 : i32 = 0; j_1 < 16i; j_1++) {
          if (((i32(threadIdx.y) * 2i) + (i32(threadIdx.x)>>4u)) < 1i) {
            var condval_6 : bool;
            if ((0i < podArgs.causal)) {
              condval_6 = (((iterator * 16i) + j_1) <= ((((((((i32(threadIdx.y) * 32i) + LH_start) + i32(threadIdx.x)) / 7i) + (((((i32(threadIdx.y) * 32i) + LH_start) + i32(threadIdx.x)) % 7i)>>31u)) + kv_chunk_len[0i]) + q_indptr[(b_idx_1 + podArgs.q_indptr_elem_offset)]) - q_indptr[((b_idx_1 + podArgs.q_indptr_elem_offset) + 1i)]));
} else {
              condval_6 = (((iterator * 16i) + j_1) < kv_chunk_len[0i]);
}
            if (condval_6) {
              K_smem[(((i32(threadIdx.y) * 512i) + (i32(threadIdx.x) * 16i)) + j_1)] = exp2((K_smem[(((i32(threadIdx.y) * 512i) + (i32(threadIdx.x) * 16i)) + j_1)] - m_new[0i]));
            } else {
              K_smem[(((i32(threadIdx.y) * 512i) + (i32(threadIdx.x) * 16i)) + j_1)] = exp2((-5.000000e+04f - m_new[0i]));
            }
          }
        }
        workgroupBarrier();
        if (((i32(threadIdx.y) * 2i) + (i32(threadIdx.x)>>4u)) < 1i) {
          for (var j_2 : i32 = 0; j_2 < 16i; j_2++) {
            d_new[0i] = (d_new[0i] + K_smem[(((i32(threadIdx.y) * 512i) + (i32(threadIdx.x) * 16i)) + j_2)]);
          }
          m_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = m_new[0i];
          d_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = d_new[0i];
          m_prev_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = m_prev[0i];
        }
        workgroupBarrier();
        for (var li_1_init : i32 = 0; li_1_init < 4i; li_1_init++) {
          for (var lj_1_init_1 : i32 = 0; lj_1_init_1 < 4i; lj_1_init_1++) {
            O_local[((li_1_init * 4i) + lj_1_init_1)] = (O_local[((li_1_init * 4i) + lj_1_init_1)] * exp2((m_prev_smem[((i32(threadIdx.y) * 4i) + li_1_init)] - m_smem[((i32(threadIdx.y) * 4i) + li_1_init)])));
          }
        }
        for (var lk_0_1 : i32 = 0; lk_0_1 < 2i; lk_0_1++) {
          for (var lk_1_1 : i32 = 0; lk_1_1 < 8i; lk_1_1++) {
            for (var li_1_1 : i32 = 0; li_1_1 < 4i; li_1_1++) {
              for (var lj_1_3 : i32 = 0; lj_1_3 < 4i; lj_1_3++) {
                O_local[((li_1_1 * 4i) + lj_1_3)] = fma(K_smem[((((i32(threadIdx.y) * 64i) + (li_1_1 * 16i)) + (lk_0_1 * 8i)) + lk_1_1)], V_smem[((((lk_0_1 * 1024i) + (lk_1_1 * 128i)) + (i32(threadIdx.x) * 4i)) + lj_1_3)], O_local[((li_1_1 * 4i) + lj_1_3)]);
              }
            }
          }
        }
      }
      for (var li_1_2 : i32 = 0; li_1_2 < 4i; li_1_2++) {
        for (var lj_1_4 : i32 = 0; lj_1_4 < 4i; lj_1_4++) {
          let cur_L : i32 = ((((((i32(threadIdx.y) * 4i) + LH_start) + li_1_2) / 7i) + (((((i32(threadIdx.y) * 4i) + LH_start) + li_1_2) % 7i)>>31u)) + q_indptr[(b_idx_1 + podArgs.q_indptr_elem_offset)]);
          if (cur_L < q_indptr[((b_idx_1 + podArgs.q_indptr_elem_offset) + 1i)]) {
            output[(((((cur_L * 3584i) + (i32(blockIdx.y) * 896i)) + ((((((i32(threadIdx.y) * 4i) + LH_start) + li_1_2) % 7i) + (7i & (((((i32(threadIdx.y) * 4i) + LH_start) + li_1_2) % 7i)>>31u))) * 128i)) + (i32(threadIdx.x) * 4i)) + lj_1_4)] = (O_local[((li_1_2 * 4i) + lj_1_4)] / d_smem[((i32(threadIdx.y) * 4i) + li_1_2)]);
          }
        }
      }
      if (((i32(threadIdx.y) * 2i) + (i32(threadIdx.x)>>4u)) < 1i) {
        let cur_L_1 : i32 = ((((((i32(threadIdx.y) * 32i) + LH_start) + i32(threadIdx.x)) / 7i) + (((((i32(threadIdx.y) * 32i) + LH_start) + i32(threadIdx.x)) % 7i)>>31u)) + q_indptr[(b_idx_1 + podArgs.q_indptr_elem_offset)]);
        if (cur_L_1 < q_indptr[((b_idx_1 + podArgs.q_indptr_elem_offset) + 1i)]) {
          lse[(((cur_L_1 * 28i) + (i32(blockIdx.y) * 7i)) + (((((i32(threadIdx.y) * 32i) + LH_start) + i32(threadIdx.x)) % 7i) + (7i & (((((i32(threadIdx.y) * 32i) + LH_start) + i32(threadIdx.x)) % 7i)>>31u))))] = (m_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] + log2(d_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))]));
        }
      }
      tile_id[0i] = (tile_id[0i] + 16i);
    }
  }
}