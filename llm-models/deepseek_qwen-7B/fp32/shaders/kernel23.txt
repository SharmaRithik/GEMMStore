//----------------------------------------
// Function: batch_decode_paged_kv_sliding_window_kernel
//----------------------------------------
@group(0) @binding(0) var<storage, read> Q : array<vec4<f32>>;
@group(0) @binding(1) var<storage, read> k_rope_pos_offset : array<i32>;
@group(0) @binding(2) var<storage, read> length_info : array<i32>;
@group(0) @binding(3) var<storage, read_write> lse : array<f32>;
@group(0) @binding(4) var<storage, read_write> output : array<vec4<f32>>;
@group(0) @binding(5) var<storage, read> page_table_indptr : array<i32>;
@group(0) @binding(6) var<storage, read> page_table_values : array<i32>;
@group(0) @binding(7) var<storage, read> pages : array<vec4<f32>>;
@group(0) @binding(8) var<storage, read> q_rope_position : array<i32>;

struct PODArgs {
  B: i32,
  attn_score_scaling_factor: f32,
  k_rope_pos_offset_elem_offset: i32,
  length_info_elem_offset: i32,
  max_num_pages: i32,
  nnz_pages: i32,
  page_indptr_elem_offset: i32,
  page_values_elem_offset: i32,
  q_rope_position_elem_offset: i32,
  rope_scale: f32,
  rope_theta: f32,
  rotary_mode: i32,
  packGridDimX: u32
}
@group(0) @binding(9) var<uniform> podArgs : PODArgs;

var<workgroup> K_smem : array<vec4<f32>, 224>;
var<workgroup> V_smem : array<vec4<f32>, 224>;
var<workgroup> red_buf0 : array<f32, 224>;
@compute @workgroup_size(32, 7, 1)
fn batch_decode_paged_kv_sliding_window_kernel(
  @builtin(workgroup_id) blockIdx : vec3<u32>,
  @builtin(num_workgroups) gridDim : vec3<u32>,
  @builtin(local_invocation_id) threadIdx : vec3<u32>
) {
  if (blockIdx.z * gridDim.x + blockIdx.x > podArgs.packGridDimX) { return; }
  let v__1 : i32 = i32(blockIdx.z * gridDim.x + blockIdx.x);
  var kv_chunk_len : array<i32, 1>;
  var st_m : array<f32, 1>;
  var st_d : array<f32, 1>;
  var O_local : array<vec4<f32>, 1>;
  var Q_local : array<vec4<f32>, 1>;
  var m_prev : array<f32, 1>;
  var S_local : array<f32, 7>;
  var QK_local : array<vec4<f32>, 1>;
  var S_reduce_local : array<f32, 1>;
  var V_local : array<vec4<f32>, 1>;
  let cur_page_indptr_begin : i32 = page_table_indptr[(v__1 + podArgs.page_indptr_elem_offset)];
  let cur_page_indptr_end : i32 = page_table_indptr[((v__1 + podArgs.page_indptr_elem_offset) + 1i)];
  var condval : i32;
  if ((cur_page_indptr_begin != cur_page_indptr_end)) {
    condval = ((((((cur_page_indptr_end * 16i) + length_info[(v__1 + podArgs.length_info_elem_offset)]) + length_info[(((podArgs.B * 2i) + v__1) + podArgs.length_info_elem_offset)]) - length_info[((v__1 + podArgs.B) + podArgs.length_info_elem_offset)]) - (cur_page_indptr_begin * 16i)) - 16i);
} else {
    condval = 0i;
}
  kv_chunk_len[0i] = condval;
  st_m[0i] = -5.000000e+04f;
  st_d[0i] = 1.000000e+00f;
  O_local[0i] = vec4<f32>(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f);
  var condval_1 : vec4<f32>;
  if ((podArgs.rotary_mode == 1i)) {
    var condval_2 : vec4<f32>;
    if ((i32(threadIdx.x) < 16i)) {
      condval_2 = (Q[((((((v__1 * 3584i) + (i32(blockIdx.y) * 896i)) + (i32(threadIdx.y) * 128i)) + (i32(threadIdx.x) * 4i)) + 64i) / 4i)] * vec4<f32>(-1.000000e+00f, -1.000000e+00f, -1.000000e+00f, -1.000000e+00f));
} else {
      condval_2 = Q[((((((v__1 * 3584i) + (i32(blockIdx.y) * 896i)) + (i32(threadIdx.y) * 128i)) + (i32(threadIdx.x) * 4i)) - 64i) / 4i)];
}
    condval_1 = fma(sin((vec4<f32>((f32(q_rope_position[(v__1 + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale), (f32(q_rope_position[(v__1 + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale), (f32(q_rope_position[(v__1 + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale), (f32(q_rope_position[(v__1 + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale)) / pow(vec4<f32>(podArgs.rope_theta, podArgs.rope_theta, podArgs.rope_theta, podArgs.rope_theta), (vec4<f32>(vec4<i32>((((i32(threadIdx.x) & 15i) * 8i))+(2i*0), (((i32(threadIdx.x) & 15i) * 8i))+(2i*1), (((i32(threadIdx.x) & 15i) * 8i))+(2i*2), (((i32(threadIdx.x) & 15i) * 8i))+(2i*3))) * vec4<f32>(7.812500e-03f, 7.812500e-03f, 7.812500e-03f, 7.812500e-03f))))), condval_2, (cos((vec4<f32>((f32(q_rope_position[(v__1 + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale), (f32(q_rope_position[(v__1 + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale), (f32(q_rope_position[(v__1 + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale), (f32(q_rope_position[(v__1 + podArgs.q_rope_position_elem_offset)]) * podArgs.rope_scale)) / pow(vec4<f32>(podArgs.rope_theta, podArgs.rope_theta, podArgs.rope_theta, podArgs.rope_theta), (vec4<f32>(vec4<i32>((((i32(threadIdx.x) & 15i) * 8i))+(2i*0), (((i32(threadIdx.x) & 15i) * 8i))+(2i*1), (((i32(threadIdx.x) & 15i) * 8i))+(2i*2), (((i32(threadIdx.x) & 15i) * 8i))+(2i*3))) * vec4<f32>(7.812500e-03f, 7.812500e-03f, 7.812500e-03f, 7.812500e-03f))))) * Q[(((((v__1 * 3584i) + (i32(blockIdx.y) * 896i)) + (i32(threadIdx.y) * 128i)) + (i32(threadIdx.x) * 4i)) / 4i)]));
} else {
    condval_1 = Q[(((((v__1 * 3584i) + (i32(blockIdx.y) * 896i)) + (i32(threadIdx.y) * 128i)) + (i32(threadIdx.x) * 4i)) / 4i)];
}
  Q_local[0i] = condval_1;
  for (var iterator : i32 = 0; iterator < (((kv_chunk_len[0i] - 2147483640i) / 7i) - -306783378i); iterator++) {
    workgroupBarrier();
    if (((iterator * 7i) + i32(threadIdx.y)) < kv_chunk_len[0i]) {
            var condval_3 : i32;
      if ((((iterator * 7i) + i32(threadIdx.y)) < length_info[(((podArgs.B * 2i) + v__1) + podArgs.length_info_elem_offset)])) {
        condval_3 = ((iterator * 7i) + i32(threadIdx.y));
} else {
        condval_3 = ((((iterator * 7i) + i32(threadIdx.y)) + length_info[((v__1 + podArgs.B) + podArgs.length_info_elem_offset)]) - length_info[(((podArgs.B * 2i) + v__1) + podArgs.length_info_elem_offset)]);
}
let seq_offset : i32 = condval_3;
      let page_no : i32 = page_table_values[(((seq_offset>>4u) + cur_page_indptr_begin) + podArgs.page_values_elem_offset)];
      var condval_4 : vec4<f32>;
      if ((podArgs.rotary_mode == 1i)) {
        var condval_5 : vec4<f32>;
        if ((i32(threadIdx.x) < 16i)) {
          condval_5 = (pages[((((((page_no * 16384i) + (i32(blockIdx.y) * 2048i)) + ((seq_offset & 15i) * 128i)) + (i32(threadIdx.x) * 4i)) + 64i) / 4i)] * vec4<f32>(-1.000000e+00f, -1.000000e+00f, -1.000000e+00f, -1.000000e+00f));
} else {
          condval_5 = pages[((((((page_no * 16384i) + (i32(blockIdx.y) * 2048i)) + ((seq_offset & 15i) * 128i)) + (i32(threadIdx.x) * 4i)) - 64i) / 4i)];
}
        condval_4 = fma(sin((vec4<f32>((f32((((iterator * 7i) + k_rope_pos_offset[(v__1 + podArgs.k_rope_pos_offset_elem_offset)]) + i32(threadIdx.y))) * podArgs.rope_scale), (f32((((iterator * 7i) + k_rope_pos_offset[(v__1 + podArgs.k_rope_pos_offset_elem_offset)]) + i32(threadIdx.y))) * podArgs.rope_scale), (f32((((iterator * 7i) + k_rope_pos_offset[(v__1 + podArgs.k_rope_pos_offset_elem_offset)]) + i32(threadIdx.y))) * podArgs.rope_scale), (f32((((iterator * 7i) + k_rope_pos_offset[(v__1 + podArgs.k_rope_pos_offset_elem_offset)]) + i32(threadIdx.y))) * podArgs.rope_scale)) / pow(vec4<f32>(podArgs.rope_theta, podArgs.rope_theta, podArgs.rope_theta, podArgs.rope_theta), (vec4<f32>(vec4<i32>((((i32(threadIdx.x) & 15i) * 8i))+(2i*0), (((i32(threadIdx.x) & 15i) * 8i))+(2i*1), (((i32(threadIdx.x) & 15i) * 8i))+(2i*2), (((i32(threadIdx.x) & 15i) * 8i))+(2i*3))) * vec4<f32>(7.812500e-03f, 7.812500e-03f, 7.812500e-03f, 7.812500e-03f))))), condval_5, (cos((vec4<f32>((f32((((iterator * 7i) + k_rope_pos_offset[(v__1 + podArgs.k_rope_pos_offset_elem_offset)]) + i32(threadIdx.y))) * podArgs.rope_scale), (f32((((iterator * 7i) + k_rope_pos_offset[(v__1 + podArgs.k_rope_pos_offset_elem_offset)]) + i32(threadIdx.y))) * podArgs.rope_scale), (f32((((iterator * 7i) + k_rope_pos_offset[(v__1 + podArgs.k_rope_pos_offset_elem_offset)]) + i32(threadIdx.y))) * podArgs.rope_scale), (f32((((iterator * 7i) + k_rope_pos_offset[(v__1 + podArgs.k_rope_pos_offset_elem_offset)]) + i32(threadIdx.y))) * podArgs.rope_scale)) / pow(vec4<f32>(podArgs.rope_theta, podArgs.rope_theta, podArgs.rope_theta, podArgs.rope_theta), (vec4<f32>(vec4<i32>((((i32(threadIdx.x) & 15i) * 8i))+(2i*0), (((i32(threadIdx.x) & 15i) * 8i))+(2i*1), (((i32(threadIdx.x) & 15i) * 8i))+(2i*2), (((i32(threadIdx.x) & 15i) * 8i))+(2i*3))) * vec4<f32>(7.812500e-03f, 7.812500e-03f, 7.812500e-03f, 7.812500e-03f))))) * pages[(((((page_no * 16384i) + (i32(blockIdx.y) * 2048i)) + ((seq_offset & 15i) * 128i)) + (i32(threadIdx.x) * 4i)) / 4i)]));
} else {
        condval_4 = pages[(((((page_no * 16384i) + (i32(blockIdx.y) * 2048i)) + ((seq_offset & 15i) * 128i)) + (i32(threadIdx.x) * 4i)) / 4i)];
}
      K_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = condval_4;
      V_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = pages[((((((page_no * 16384i) + (i32(blockIdx.y) * 2048i)) + ((seq_offset & 15i) * 128i)) + (i32(threadIdx.x) * 4i)) + 8192i) / 4i)];
    } else {
      K_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = vec4<f32>(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f);
      V_smem[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = vec4<f32>(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f);
    }
    workgroupBarrier();
    m_prev[0i] = st_m[0i];
    for (var j : i32 = 0; j < 7i; j++) {
      QK_local[0i] = (((Q_local[0i] * K_smem[((j * 32i) + i32(threadIdx.x))]) * vec4<f32>(podArgs.attn_score_scaling_factor, podArgs.attn_score_scaling_factor, podArgs.attn_score_scaling_factor, podArgs.attn_score_scaling_factor)) * vec4<f32>(1.275174e-01f, 1.275174e-01f, 1.275174e-01f, 1.275174e-01f));
      S_reduce_local[0i] = 0.000000e+00f;
      S_reduce_local[0i] = (S_reduce_local[0i] + QK_local[0i][0]);
      S_reduce_local[0i] = (S_reduce_local[0i] + QK_local[0i][1]);
      S_reduce_local[0i] = (S_reduce_local[0i] + QK_local[0i][2]);
      S_reduce_local[0i] = (S_reduce_local[0i] + QK_local[0i][3]);
      workgroupBarrier();
      red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = S_reduce_local[0i];
      workgroupBarrier();
      if (i32(threadIdx.x) < 16i) {
        red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = (red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] + red_buf0[(((i32(threadIdx.y) * 32i) + i32(threadIdx.x)) + 16i)]);
      }
      workgroupBarrier();
      if (i32(threadIdx.x) < 8i) {
        red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = (red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] + red_buf0[(((i32(threadIdx.y) * 32i) + i32(threadIdx.x)) + 8i)]);
      }
      workgroupBarrier();
      if (i32(threadIdx.x) < 4i) {
        red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = (red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] + red_buf0[(((i32(threadIdx.y) * 32i) + i32(threadIdx.x)) + 4i)]);
      }
      workgroupBarrier();
      if (i32(threadIdx.x) < 2i) {
        red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = (red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] + red_buf0[(((i32(threadIdx.y) * 32i) + i32(threadIdx.x)) + 2i)]);
      }
      workgroupBarrier();
      if (i32(threadIdx.x) < 1i) {
        red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] = (red_buf0[((i32(threadIdx.y) * 32i) + i32(threadIdx.x))] + red_buf0[(((i32(threadIdx.y) * 32i) + i32(threadIdx.x)) + 1i)]);
      }
      workgroupBarrier();
      S_local[j] = -5.000000e+04f;
      if (((iterator * 7i) + j) < kv_chunk_len[0i]) {
        S_local[j] = red_buf0[(i32(threadIdx.y) * 32i)];
      }
      st_m[0i] = max(st_m[0i], S_local[j]);
    }
    let o_scale : f32 = exp2((m_prev[0i] - st_m[0i]));
    st_d[0i] = (st_d[0i] * o_scale);
    for (var j_1 : i32 = 0; j_1 < 7i; j_1++) {
      S_local[j_1] = exp2((S_local[j_1] - st_m[0i]));
      st_d[0i] = (st_d[0i] + S_local[j_1]);
    }
    O_local[0i] = (O_local[0i] * vec4<f32>(o_scale, o_scale, o_scale, o_scale));
    for (var j_2 : i32 = 0; j_2 < 7i; j_2++) {
      V_local[0i] = V_smem[((j_2 * 32i) + i32(threadIdx.x))];
      O_local[0i] = fma(V_local[0i], vec4<f32>(S_local[j_2], S_local[j_2], S_local[j_2], S_local[j_2]), O_local[0i]);
    }
  }
  O_local[0i] = (O_local[0i] / vec4<f32>(st_d[0i], st_d[0i], st_d[0i], st_d[0i]));
  output[(((((v__1 * 3584i) + (i32(blockIdx.y) * 896i)) + (i32(threadIdx.y) * 128i)) + (i32(threadIdx.x) * 4i)) / 4i)] = O_local[0i];
  lse[(((v__1 * 28i) + (i32(blockIdx.y) * 7i)) + i32(threadIdx.y))] = (st_m[0i] + log2(st_d[0i]));
}